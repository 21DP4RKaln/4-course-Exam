// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Lietotāju modeļi
model User {
  id              String          @id @default(uuid())
  email           String          @unique
  password        String
  name            String?
  role            Role            @default(USER)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  configurations  Configuration[]
  orders          Order[]
}

enum Role {
  USER
  ADMIN
  SPECIALIST
}

// Komponentu modeļi
model ComponentCategory {
  id          String      @id @default(uuid())
  name        String
  description String?
  components  Component[]
}

model Component {
  id              String            @id @default(uuid())
  name            String
  description     String?           @db.Text
  price           Float
  stock           Int               @default(0)
  imageUrl        String?
  categoryId      String
  category        ComponentCategory @relation(fields: [categoryId], references: [id])
  specifications  Json?
  configItems     ConfigItem[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// Konfigurācija modeļi
model Configuration {
  id              String        @id @default(uuid())
  name            String
  description     String?       @db.Text
  userId          String?
  user            User?         @relation(fields: [userId], references: [id])
  totalPrice      Float
  status          ConfigStatus  @default(DRAFT)
  isTemplate      Boolean       @default(false)
  isPublic        Boolean       @default(false)
  components      ConfigItem[]
  orders          Order[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum ConfigStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

model ConfigItem {
  id              String        @id @default(uuid())
  configurationId String
  configuration   Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  componentId     String
  component       Component     @relation(fields: [componentId], references: [id])
  quantity        Int           @default(1)
}

// Pasūtījumu modeļi
model Order {
  id              String        @id @default(uuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  configurationId String?
  configuration   Configuration? @relation(fields: [configurationId], references: [id])
  status          OrderStatus   @default(PENDING)
  totalAmount     Float
  shippingAddress String?       @db.Text
  paymentMethod   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}