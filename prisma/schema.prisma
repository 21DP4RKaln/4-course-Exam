generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  SPECIALIST
  ADMIN
}

model User {
  id                String             @id @default(uuid())
  name              String             @db.VarChar(30)
  surname           String             @db.VarChar(30)
  email             String             @unique @db.VarChar(50)
  phoneNumber       String?            @unique @db.VarChar(20)
  password          String             @db.VarChar(255)
  role              UserRole           @default(CLIENT)  
  blocked           Boolean            @default(false)   
  profilePicture    String?            @db.Text        
  registrationDate  DateTime           @default(now())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  configurations    Configuration[]    @relation("CreatedBy")
  serviceOrders     ServiceOrder[]
  approvedConfigs   Configuration[]    @relation("ApprovedBy")
  statusChanges     StatusChange[]
  statusUpdates     StatusUpdate[]
}

model Component {
  id                   String               @id @default(uuid())
  name                 String               @db.VarChar(50)
  manufacturer         String               @db.VarChar(30)
  category             String               @db.VarChar(30)
  price                Decimal              @db.Decimal(10, 2)
  specifications       String               @db.Text
  availabilityStatus   String               @default("pieejams")
  configurations       Configuration[]      @relation("ComponentToConfiguration")
  serviceComponents    ServiceComponent[]
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  addedById            String?              // Admin who added this component
}

model Configuration {
  id               String       @id @default(uuid())
  name             String       @db.VarChar(50)
  userId           String
  user             User         @relation("CreatedBy", fields: [userId], references: [id])
  components       Component[]  @relation("ComponentToConfiguration")
  totalPrice       Decimal      @db.Decimal(10, 2)
  status           String       @default("saglabƒÅts")
  isPublic         Boolean      @default(false)
  approvedById     String?
  approvedBy       User?        @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedAt       DateTime?
  order            Order?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Order {
  id               String         @id @default(uuid())
  orderNumber      String         @unique @db.VarChar(15)
  configurationId  String         @unique
  configuration    Configuration  @relation(fields: [configurationId], references: [id])
  orderDate        DateTime       @default(now())
  totalAmount      Decimal        @db.Decimal(10, 2)
  status           String         @default("jauns")
  statusChanges    StatusChange[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model StatusChange {
  id           String   @id @default(uuid())
  orderId      String
  order        Order    @relation(fields: [orderId], references: [id])
  oldStatus    String
  newStatus    String
  changedById  String
  changedBy    User     @relation(fields: [changedById], references: [id])
  createdAt    DateTime @default(now())
}

model ServiceOrder {
  id                 String               @id @default(uuid())
  userId             String
  user               User                 @relation(fields: [userId], references: [id])
  problemDescription String               @db.Text
  deviceType         String               @db.VarChar(50)
  cost               Decimal              @db.Decimal(10, 2)
  status             String               @default("jauns")
  deliveryDate       DateTime?
  completionDate     DateTime?
  serviceComponents  ServiceComponent[]
  statusUpdates      StatusUpdate[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
}

model StatusUpdate {
  id              String        @id @default(uuid())
  serviceOrderId  String
  serviceOrder    ServiceOrder  @relation(fields: [serviceOrderId], references: [id])
  oldStatus       String
  newStatus       String
  updatedById     String
  updatedBy       User          @relation(fields: [updatedById], references: [id])
  createdAt       DateTime      @default(now())
}

model ServiceComponent {
  id                 String            @id @default(uuid())
  serviceOrderId     String
  serviceOrder       ServiceOrder      @relation(fields: [serviceOrderId], references: [id])
  componentId        String
  component          Component         @relation(fields: [componentId], references: [id])
  damageType         String            @db.VarChar(100)
  requiredWork       String            @db.Text
  workAmount         Int               // Minutes
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}