generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("ivapro_DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  email               String?              @unique
  password            String?
  name                String?
  role                Role                 @default(USER)
  isBlocked           Boolean              @default(false)
  blockReason         String?              @db.Text
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  firstName           String?
  lastName            String?
  phone               String?              @unique
  profileImageUrl     String?
  shippingAddress     String?
  shippingCity        String?
  shippingPostalCode  String?
  shippingCountry     String?
  accounts            Account[]
  auditLogs           AuditLog[]
  configurations      Configuration[]
  orders              Order[]
  passwordResetTokens PasswordResetToken[]
  repairs             Repair[]
  repairSpecialist    RepairSpecialist[]
  reviews             Review[]
  reviewHelpful       ReviewHelpful[]
  sessions            Session[]
  wishlists           Wishlist[]

  @@map("user")
}

model ComponentCategory {
  id           String      @id @default(uuid())
  name         String      @unique
  description  String?     @db.Text
  displayOrder Int         @default(0)
  slug         String      @unique
  type         String      @default("component")
  components   Component[]

  @@map("componentcategory")
}

model ConfigItem {
  id              String        @id @default(uuid())
  configurationId String
  componentId     String
  quantity        Int           @default(1)
  component       Component     @relation(fields: [componentId], references: [id], map: "config_item_component_fk")
  configuration   Configuration @relation(fields: [configurationId], references: [id], onDelete: Cascade, map: "config_item_configuration_fk")

  @@index([componentId], map: "config_item_component_fk")
  @@index([configurationId], map: "config_item_configuration_fk")
  @@map("configitem")
}

model Configuration {
  id                String       @id @default(uuid())
  name              String
  description       String?      @db.Text
  userId            String?
  totalPrice        Float
  status            ConfigStatus @default(DRAFT)
  isTemplate        Boolean      @default(false)
  isPublic          Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  category          String?
  imageUrl          String?
  viewCount         Int          @default(0)
  discountExpiresAt DateTime?
  discountPrice     Float?
  components        ConfigItem[]
  user              User?        @relation(fields: [userId], references: [id], map: "configuration_user_fk")
  orders            Order[]
  repairs           Repair[]

  @@index([userId], map: "configuration_user_fk")
  @@map("configuration")
}

model PeripheralCategory {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?      @db.Text
  slug        String       @unique
  type        String       @default("peripheral")
  peripherals Peripheral[]

  @@map("peripheralcategory")
}

model Peripheral {
  id                String             @id @default(uuid())
  name              String
  description       String?            @db.Text
  price             Float
  categoryId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sku               String             @unique
  viewCount         Int                @default(0)
  discountExpiresAt DateTime?
  discountPrice     Float?
  subType           String
  imagesUrl         String?            @db.Text
  quantity          Int                @default(0)
  rating            Float?             @default(0)
  ratingCount       Int                @default(0)
  camera            Camera?
  gamepad           Gamepad?
  headphones        Headphones?
  keyboard          Keyboard?
  microphone        Microphone?
  monitor           Monitor?
  mouse             Mouse?
  mousePad          MousePad?
  category          PeripheralCategory @relation(fields: [categoryId], references: [id], map: "peripheral_category_fk")
  repairs           Repair[]
  speakers          Speakers?

  @@index([categoryId], map: "peripheral_category_fk")
  @@map("peripheral")
}

model Repair {
  id              String             @id @default(uuid())
  title           String
  description     String?            @db.Text
  status          RepairStatus       @default(PENDING)
  priority        RepairPriority     @default(NORMAL)
  userId          String
  peripheralId    String?
  configurationId String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  estimatedCost   Float?
  finalCost       Float?
  completionDate  DateTime?
  diagnosticNotes String?            @db.Text
  configuration   Configuration?     @relation(fields: [configurationId], references: [id], map: "repair_configuration_fk")
  peripheral      Peripheral?        @relation(fields: [peripheralId], references: [id], map: "repair_peripheral_fk")
  user            User               @relation(fields: [userId], references: [id], map: "repair_user_fk")
  parts           RepairPart[]
  specialists     RepairSpecialist[]

  @@index([configurationId], map: "repair_configuration_fk")
  @@index([peripheralId], map: "repair_peripheral_fk")
  @@index([userId], map: "repair_user_fk")
  @@map("repair")
}

model RepairSpecialist {
  id           String   @id @default(uuid())
  repairId     String
  specialistId String
  assignedAt   DateTime @default(now())
  notes        String?  @db.Text
  repair       Repair   @relation(fields: [repairId], references: [id], onDelete: Cascade, map: "repair_specialist_repair_fk")
  specialist   User     @relation(fields: [specialistId], references: [id], map: "repair_specialist_user_fk")

  @@unique([repairId, specialistId])
  @@index([specialistId], map: "repair_specialist_user_fk")
  @@map("repairspecialist")
}

model RepairPart {
  id          String    @id @default(uuid())
  repairId    String
  componentId String
  quantity    Int       @default(1)
  price       Float
  component   Component @relation(fields: [componentId], references: [id], map: "repair_part_component_fk")
  repair      Repair    @relation(fields: [repairId], references: [id], onDelete: Cascade, map: "repair_part_repair_fk")

  @@index([componentId], map: "repair_part_component_fk")
  @@index([repairId], map: "repair_part_repair_fk")
  @@map("repairpart")
}

model Order {
  id              String         @id @default(uuid())
  userId          String?
  configurationId String?
  status          OrderStatus    @default(PENDING)
  totalAmount     Float
  shippingAddress String?        @db.Text
  paymentMethod   String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  shippingMethod  String?
  isGuestOrder    Boolean        @default(false)
  shippingEmail   String?
  shippingName    String?
  shippingPhone   String?
  discount        Float?         @default(0)
  shippingCost    Float?         @default(10)
  locale          String?        @default("en")
  configuration   Configuration? @relation(fields: [configurationId], references: [id], map: "order_configuration_fk")
  user            User?          @relation(fields: [userId], references: [id], map: "order_user_fk")
  orderItems      OrderItem[]

  @@index([configurationId], map: "order_configuration_fk")
  @@index([userId], map: "order_user_fk")
  @@map("order")
}

model Review {
  id           String          @id @default(uuid())
  userId       String
  productId    String
  productType  ProductType
  rating       Int
  comment      String?         @db.Text
  purchaseDate DateTime?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id])
  helpful      ReviewHelpful[]

  @@unique([userId, productId, productType])
  @@index([productId, productType])
  @@map("review")
}

model ReviewHelpful {
  id        String   @id @default(uuid())
  reviewId  String
  userId    String
  isHelpful Boolean  @default(true)
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade, map: "review_helpful_review_fk")
  user      User     @relation(fields: [userId], references: [id], map: "review_helpful_user_fk")

  @@unique([reviewId, userId])
  @@index([userId], map: "review_helpful_user_fk")
  @@map("review_helpful")
}

model Wishlist {
  id          String   @id @default(uuid())
  userId      String
  productId   String
  productType String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId, productType])
  @@map("wishlist")
}

model OrderItem {
  id          String      @id @default(uuid())
  orderId     String
  productId   String
  productType ProductType
  quantity    Int         @default(1)
  price       Float
  name        String
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, map: "order_item_order_fk")

  @@index([orderId], map: "order_item_order_fk")
  @@map("order_item")
}

model PromoCode {
  id                 String              @id @default(uuid())
  code               String              @unique
  description        String?             @db.Text
  discountPercentage Int
  maxDiscountAmount  Float?
  minOrderValue      Float?
  maxUsage           Int?
  usageCount         Int                 @default(0)
  isActive           Boolean             @default(true)
  expiresAt          DateTime
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  scope              PromoCodeScope      @default(ALL)
  campaigns          MarketingCampaign[]
  products           PromoProduct[]

  @@map("promocode")
}

model PromoProduct {
  id          String    @id @default(uuid())
  promoCodeId String
  productId   String
  productType String
  promoCode   PromoCode @relation(fields: [promoCodeId], references: [id], onDelete: Cascade, map: "promo_product_promo_code_fk")

  @@index([promoCodeId], map: "promo_product_promo_code_fk")
  @@map("promoproduct")
}

model AuditLog {
  id         String   @id @default(uuid())
  userId     String
  action     String
  entityType String
  entityId   String   @default("")
  details    String   @db.Text
  ipAddress  String?  @default("")
  userAgent  String?  @db.Text
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([entityType])
  @@index([createdAt])
  @@map("audit_log")
}

model MarketingCampaign {
  id             String           @id @default(uuid())
  name           String
  description    String?          @db.Text
  startDate      DateTime
  endDate        DateTime
  type           String
  targetAudience String
  status         String
  content        String?          @db.Text
  bannerImageUrl String?
  promoCodeId    String?
  metadata       String?          @db.LongText
  createdById    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  metrics        CampaignMetrics?
  promoCode      PromoCode?       @relation(fields: [promoCodeId], references: [id], map: "marketing_campaign_promo_code_fk")

  @@index([promoCodeId], map: "marketing_campaign_promo_code_fk")
  @@map("marketing_campaign")
}

model CampaignMetrics {
  id          String            @id @default(uuid())
  campaignId  String            @unique
  impressions Int               @default(0)
  clicks      Int               @default(0)
  conversions Int               @default(0)
  lastUpdated DateTime
  campaign    MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@map("campaign_metrics")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "account_user_fk")

  @@unique([provider, providerAccountId])
  @@index([userId], map: "account_user_fk")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "session_user_fk")

  @@index([userId], map: "session_user_fk")
  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  code      String
  type      String
  contact   String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "password_reset_token_user_fk")

  @@index([userId], map: "password_reset_token_user_fk")
  @@map("password_reset_tokens")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Component {
  id                String            @id @default(uuid())
  name              String
  description       String?           @db.Text
  price             Float
  categoryId        String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  sku               String            @unique
  viewCount         Int               @default(0)
  discountExpiresAt DateTime?
  discountPrice     Float?
  subType           String
  imagesUrl         String?           @db.Text
  quantity          Int               @default(0)
  rating            Float?            @default(0)
  ratingCount       Int               @default(0)
  caseModel         Case?
  category          ComponentCategory @relation(fields: [categoryId], references: [id], map: "component_category_fk")
  configItems       ConfigItem[]
  cooling           Cooling?
  cpu               CPU?
  gpu               GPU?
  motherboard       Motherboard?
  psu               PSU?
  ram               RAM?
  repairParts       RepairPart[]
  storage           Storage?

  @@index([categoryId], map: "component_category_fk")
  @@map("component")
}

model CPU {
  id               String    @id @default(uuid())
  componentId      String    @unique
  socket           String
  series           String
  cores            Int
  integratedGpu    Boolean
  frequency        Float
  maxRamCapacity   Int
  maxRamFrequency  Int
  multithreading   Boolean
  brand            String
  powerConsumption Float     @default(0)
  component        Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("cpu")
}

model GPU {
  id                  String    @id @default(uuid())
  componentId         String    @unique
  memoryType          String
  brand               String
  chipType            String
  fanCount            Int
  hasDVI              Boolean
  hasDisplayPort      Boolean
  hasHDMI             Boolean
  hasVGA              Boolean
  videoMemoryCapacity Int
  powerConsumption    Float     @default(0)
  subBrand            String?
  architecture        String?
  component           Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("gpu")
}

model Motherboard {
  id                  String    @id @default(uuid())
  componentId         String    @unique
  socket              String
  memorySlots         Int
  m2Slots             Int
  brand               String
  maxMemoryFrequency  Int
  maxRamCapacity      Int
  maxVideoCards       Int
  memoryTypeSupported String
  nvmeSupport         Boolean
  processorSupport    String
  sataPorts           Int
  sliCrossfireSupport Boolean
  wifiBluetooth       Boolean
  form                String?
  compatibility       String?
  component           Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("motherboard")
}

model RAM {
  id               String    @id @default(uuid())
  componentId      String    @unique
  voltage          Float
  backlighting     Boolean
  brand            String
  maxFrequency     Int
  memoryType       String
  moduleCount      Int
  powerConsumption Float     @default(0)
  gb               Int?
  component        Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("ram")
}

model Storage {
  id               String    @id @default(uuid())
  componentId      String    @unique
  type             String
  readSpeed        Float
  writeSpeed       Float
  brand            String
  compatibility    String
  nvme             Boolean
  size             String
  volume           Int
  powerConsumption Float     @default(0)
  component        Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("storage")
}

model PSU {
  id                   String    @id @default(uuid())
  componentId          String    @unique
  brand                String
  hasFan               Boolean
  molexPataConnections Int
  pciEConnections      Int
  pfc                  Boolean
  power                Int
  sataConnections      Int
  energyEfficiency     String?
  component            Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("psu")
}

model Cooling {
  id           String    @id @default(uuid())
  componentId  String    @unique
  brand        String
  fanDiameter  Float
  fanSpeed     Int
  socket       String
  category     String?
  radiatorSize String?
  subCategory  String?
  component    Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("cooling")
}

model Case {
  id                  String    @id @default(uuid())
  componentId         String    @unique
  audioIn             Boolean
  audioOut            Boolean
  brand               String
  color               String
  material            String
  powerSupplyIncluded Boolean
  slots25             Int
  slots35             Int
  slots525            Int
  usb2                Int
  usb3                Int
  usb32               Int
  usbTypeC            Int
  waterCoolingSupport Boolean
  form                String?
  component           Component @relation(fields: [componentId], references: [id], onDelete: Cascade)

  @@map("case")
}

model Keyboard {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  switchType   String
  layout       String
  connection   String
  rgb          Boolean
  numpad       Boolean
  brand        String
  form         String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("keyboard")
}

model Mouse {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  dpi          Int
  buttons      Int
  connection   String
  rgb          Boolean
  weight       Float
  sensor       String
  batteryLife  Int
  batteryType  String
  brand        String
  category     String
  color        String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("mouse")
}

model Microphone {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  type         String
  pattern      String
  frequency    Int
  sensitivity  Float
  interface    String
  stand        Boolean
  brand        String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("microphone")
}

model Camera {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  resolution   String
  fps          Float
  fov          Float
  microphone   Boolean
  autofocus    Boolean
  connection   String
  brand        String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("camera")
}

model Monitor {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  size         Float
  resolution   String
  refreshRate  Int
  panelType    String
  responseTime Float
  brightness   Int
  hdr          Boolean
  ports        String
  speakers     Boolean
  curved       Boolean
  brand        String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("monitor")
}

model Headphones {
  id              String     @id @default(uuid())
  peripheralId    String     @unique
  type            String
  connection      String
  microphone      Boolean
  impedance       Float
  frequency       String
  weight          Float
  noiseCancelling Boolean
  rgb             Boolean
  brand           String
  peripheral      Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("headphones")
}

model Speakers {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  type         String
  totalWattage Int
  frequency    String
  connections  String
  bluetooth    Boolean
  remote       Boolean
  brand        String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("speakers")
}

model Gamepad {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  connection   String
  platform     String
  layout       String
  vibration    Boolean
  rgb          Boolean
  batteryLife  Int
  programmable Boolean
  brand        String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("gamepad")
}

model MousePad {
  id           String     @id @default(uuid())
  peripheralId String     @unique
  dimensions   String
  thickness    Float
  material     String
  rgb          Boolean
  surface      String
  brand        String
  peripheral   Peripheral @relation(fields: [peripheralId], references: [id], onDelete: Cascade)

  @@map("mousepad")
}

model service {
  id          String   @id
  name        String
  description String?  @db.Text
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

enum PromoCodeScope {
  ALL
  SPECIFIC_PRODUCTS
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SPECIALIST
}

enum ConfigStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum RepairStatus {
  PENDING
  DIAGNOSING
  WAITING_FOR_PARTS
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RepairPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum ProductType {
  CONFIGURATION
  COMPONENT
  PERIPHERAL
}
